namespace Logistics.Shared.Geo;

public static class Countries
{
    private static readonly Dictionary<string, Country> CodeLookup;

    public static readonly Country[] AllCountries =
    [
        new("Andorra", "AD"),
        new("United Arab Emirates", "AE"),
        new("Afghanistan", "AF"),
        new("Antigua and Barbuda", "AG"),
        new("Anguilla", "AI"),
        new("Albania", "AL"),
        new("Armenia", "AM"),
        new("Angola", "AO"),
        new("Antarctica", "AQ"),
        new("Argentina", "AR"),
        new("American Samoa", "AS"),
        new("Austria", "AT"),
        new("Australia", "AU"),
        new("Aruba", "AW"),
        new("Azerbaijan", "AZ"),
        new("Bosnia and Herzegovina", "BA"),
        new("Barbados", "BB"),
        new("Bangladesh", "BD"),
        new("Belgium", "BE"),
        new("Burkina Faso", "BF"),
        new("Bulgaria", "BG"),
        new("Bahrain", "BH"),
        new("Burundi", "BI"),
        new("Benin", "BJ"),
        new("Saint Barthélemy", "BL"),
        new("Bermuda", "BM"),
        new("Brunei Darussalam", "BN"),
        new("Bolivia", "BO"),
        new("Bonaire, Sint Eustatius and Saba", "BQ"),
        new("Brazil", "BR"),
        new("Bahamas", "BS"),
        new("Bhutan", "BT"),
        new("Bouvet Island", "BV"),
        new("Botswana", "BW"),
        new("Belarus", "BY"),
        new("Belize", "BZ"),
        new("Canada", "CA"),
        new("Cocos (Keeling) Islands", "CC"),
        new("Congo (Congo-Brazzaville)", "CG"),
        new("Central African Republic", "CF"),
        new("Congo, Democratic Republic of the", "CD"),
        new("Switzerland", "CH"),
        new("Côte d'Ivoire", "CI"),
        new("Cook Islands", "CK"),
        new("Chile", "CL"),
        new("Cameroon", "CM"),
        new("China", "CN"),
        new("Colombia", "CO"),
        new("Costa Rica", "CR"),
        new("Cuba", "CU"),
        new("Cape Verde", "CV"),
        new("Cayman Islands", "KY"),
        new("Cyprus", "CY"),
        new("Czechia", "CZ"),
        new("Germany", "DE"),
        new("Djibouti", "DJ"),
        new("Denmark", "DK"),
        new("Dominica", "DM"),
        new("Dominican Republic", "DO"),
        new("Algeria", "DZ"),
        new("Ecuador", "EC"),
        new("Estonia", "EE"),
        new("Egypt", "EG"),
        new("Western Sahara", "EH"),
        new("Spain", "ES"),
        new("Ethiopia", "ET"),
        new("Eritrea", "ER"),
        new("Finland", "FI"),
        new("Fiji", "FJ"),
        new("Falkland Islands", "FK"),
        new("Micronesia", "FM"),
        new("Faroe Islands", "FO"),
        new("France", "FR"),
        new("Gabon", "GA"),
        new("United Kingdom", "GB"),
        new("Grenada", "GD"),
        new("Georgia", "GE"),
        new("French Guiana", "GF"),
        new("Guernsey", "GG"),
        new("Ghana", "GH"),
        new("Gibraltar", "GI"),
        new("Greenland", "GL"),
        new("Gambia", "GM"),
        new("Guinea", "GN"),
        new("Guadeloupe", "GP"),
        new("Equatorial Guinea", "GQ"),
        new("Greece", "GR"),
        new("South Georgia and the South Sandwich Islands", "GS"),
        new("Guatemala", "GT"),
        new("Guam", "GU"),
        new("Guinea-Bissau", "GW"),
        new("Guyana", "GY"),
        new("Hong Kong", "HK"),
        new("Heard Island and McDonald Islands", "HM"),
        new("Honduras", "HN"),
        new("Croatia", "HR"),
        new("Haiti", "HT"),
        new("Hungary", "HU"),
        new("Indonesia", "ID"),
        new("Ireland", "IE"),
        new("Israel", "IL"),
        new("Isle of Man", "IM"),
        new("India", "IN"),
        new("British Indian Ocean Territory", "IO"),
        new("Iraq", "IQ"),
        new("Iran", "IR"),
        new("Iceland", "IS"),
        new("Italy", "IT"),
        new("Jersey", "JE"),
        new("Jamaica", "JM"),
        new("Jordan", "JO"),
        new("Japan", "JP"),
        new("Kenya", "KE"),
        new("Kyrgyzstan", "KG"),
        new("Cambodia", "KH"),
        new("Kiribati", "KI"),
        new("Comoros", "KM"),
        new("Saint Kitts and Nevis", "KN"),
        new("Democratic People's Republic of Korea", "KP"),
        new("Republic of Korea", "KR"),
        new("Kuwait", "KW"),
        new("Kazakhstan", "KZ"),
        new("Laos", "LA"),
        new("Lebanon", "LB"),
        new("Saint Lucia", "LC"),
        new("Liechtenstein", "LI"),
        new("Sri Lanka", "LK"),
        new("Liberia", "LR"),
        new("Lesotho", "LS"),
        new("Lithuania", "LT"),
        new("Luxembourg", "LU"),
        new("Latvia", "LV"),
        new("Libya", "LY"),
        new("Morocco", "MA"),
        new("Monaco", "MC"),
        new("Moldova", "MD"),
        new("Montenegro", "ME"),
        new("Saint Martin", "MF"),
        new("Madagascar", "MG"),
        new("Marshall Islands", "MH"),
        new("North Macedonia", "MK"),
        new("Mali", "ML"),
        new("Myanmar", "MM"),
        new("Mongolia", "MN"),
        new("Macao", "MO"),
        new("Northern Mariana Islands", "MP"),
        new("Martinique", "MQ"),
        new("Mauritania", "MR"),
        new("Montserrat", "MS"),
        new("Malta", "MT"),
        new("Mauritius", "MU"),
        new("Malawi", "MW"),
        new("Mexico", "MX"),
        new("Malaysia", "MY"),
        new("Mozambique", "MZ"),
        new("Namibia", "NA"),
        new("New Caledonia", "NC"),
        new("Niger", "NE"),
        new("Norfolk Island", "NF"),
        new("Nigeria", "NG"),
        new("Nicaragua", "NI"),
        new("Netherlands", "NL"),
        new("Norway", "NO"),
        new("Nepal", "NP"),
        new("Nauru", "NR"),
        new("Niue", "NU"),
        new("New Zealand", "NZ"),
        new("Oman", "OM"),
        new("Panama", "PA"),
        new("Peru", "PE"),
        new("French Polynesia", "PF"),
        new("Papua New Guinea", "PG"),
        new("Philippines", "PH"),
        new("Pakistan", "PK"),
        new("Poland", "PL"),
        new("Saint Pierre and Miquelon", "PM"),
        new("Pitcairn Islands", "PN"),
        new("Puerto Rico", "PR"),
        new("State of Palestine", "PS"),
        new("Portugal", "PT"),
        new("Palau", "PW"),
        new("Paraguay", "PY"),
        new("Qatar", "QA"),
        new("Réunion", "RE"),
        new("Romania", "RO"),
        new("Serbia", "RS"),
        new("Russian Federation", "RU"),
        new("Rwanda", "RW"),
        new("Saudi Arabia", "SA"),
        new("Solomon Islands", "SB"),
        new("Seychelles", "SC"),
        new("Sudan", "SD"),
        new("Sweden", "SE"),
        new("Singapore", "SG"),
        new("Saint Helena", "SH"),
        new("Slovenia", "SI"),
        new("Slovakia", "SK"),
        new("Sierra Leone", "SL"),
        new("San Marino", "SM"),
        new("Senegal", "SN"),
        new("Somalia", "SO"),
        new("Suriname", "SR"),
        new("South Sudan", "SS"),
        new("El Salvador", "SV"),
        new("Sint Maarten", "SX"),
        new("Sao Tome and Principe", "ST"),
        new("Syria", "SY"),
        new("Eswatini", "SZ"),
        new("Turks and Caicos Islands", "TC"),
        new("Chad", "TD"),
        new("French Southern Territories", "TF"),
        new("Togo", "TG"),
        new("Thailand", "TH"),
        new("Tajikistan", "TJ"),
        new("Tokelau", "TK"),
        new("Timor-Leste", "TL"),
        new("Turkmenistan", "TM"),
        new("Tunisia", "TN"),
        new("Tonga", "TO"),
        new("Turkey", "TR"),
        new("Trinidad and Tobago", "TT"),
        new("Tuvalu", "TV"),
        new("Taiwan", "TW"),
        new("Tanzania", "TZ"),
        new("Ukraine", "UA"),
        new("Uganda", "UG"),
        new("United States Minor Outlying Islands", "UM"),
        new("United States", "US"),
        new("Uruguay", "UY"),
        new("Uzbekistan", "UZ"),
        new("Vanuatu", "VU"),
        new("Venezuela", "VE"),
        new("Viet Nam", "VN"),
        new("Wallis and Futuna", "WF"),
        new("Samoa", "WS"),
        new("Yemen", "YE"),
        new("Mayotte", "YT"),
        new("South Africa", "ZA"),
        new("Zambia", "ZM"),
        new("Zimbabwe", "ZW"),
    ];

    static Countries()
    {
        CodeLookup = AllCountries.ToDictionary(country => country.Code, StringComparer.OrdinalIgnoreCase);
    }

    public static Country? GetCountryByCode(string code)
    {
        CodeLookup.TryGetValue(code, out var country);
        return country;
    }

    /// <summary>
    /// Finds a country by its name or code.
    /// </summary>
    /// <param name="countryName">The name or code of the country.</param>
    /// <returns>The country object if found; otherwise, null.</returns>
    public static Country? FindCountry(string countryName)
    {
        var country = GetCountryByCode(countryName) ??
                      AllCountries.FirstOrDefault(c => c.DisplayName.Equals(countryName, StringComparison.OrdinalIgnoreCase));

        return country;
    }
}
