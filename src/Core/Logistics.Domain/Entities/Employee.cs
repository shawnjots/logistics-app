using Logistics.Domain.Core;
using Logistics.Domain.Primitives.Enums;
using Logistics.Domain.Primitives.ValueObjects;

namespace Logistics.Domain.Entities;

public class Employee : Entity, ITenantEntity
{
    public required string Email { get; set; }
    public required string FirstName { get; set; }
    public required string LastName { get; set; }
    public string? PhoneNumber { get; set; }

    public Money Salary { get; set; } = Money.Zero();
    public SalaryType SalaryType { get; set; } = SalaryType.None;

    /// <summary>
    ///     When employee joined to this tenant
    /// </summary>
    public DateTime JoinedDate { get; set; } = DateTime.UtcNow;

    /// <summary>
    ///     User's device token generated by the Firebase
    /// </summary>
    public string? DeviceToken { get; set; }

    public virtual List<EmployeeDocument> Documents { get; set; } = [];

    /// <summary>
    ///     Dispatched loads by dispatchers
    /// </summary>
    public virtual List<Load> DispatchedLoads { get; } = [];

    public virtual List<PayrollInvoice> PayrollInvoices { get; set; } = [];

    /// <summary>
    ///     User tenant roles
    /// </summary>
    public virtual HashSet<TenantRole> Roles { get; } = new(new TenantRoleComparer());

    public virtual List<EmployeeTenantRole> EmployeeRoles { get; } = [];

    public string GetFullName()
    {
        return string.Join(" ", FirstName, LastName);
    }

    public static Employee CreateEmployeeFromUser(
        User user,
        decimal salary = 0,
        SalaryType salaryType = SalaryType.None)
    {
        var newEmployee = new Employee
        {
            Id = user.Id,
            Email = user.Email!,
            FirstName = user.FirstName,
            LastName = user.LastName,
            PhoneNumber = user.PhoneNumber,
            Salary = salary,
            SalaryType = salaryType
        };

        return newEmployee;
    }
}
