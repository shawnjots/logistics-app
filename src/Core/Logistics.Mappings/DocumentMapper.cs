using Logistics.Domain.Entities;
using Logistics.Shared.Models;

using Riok.Mapperly.Abstractions;

namespace Logistics.Mappings;

[Mapper]
public static partial class DocumentMapper
{
    // Base -> DTO (polymorphic dispatcher; not generated)
    public static DocumentDto ToDto(this Document src)
    {
        return src switch
        {
            LoadDocument ld => ToLoadDocumentDto(ld),
            EmployeeDocument ed => ToEmployeeDocumentDto(ed),
            _ => throw new NotSupportedException($"Unsupported document type: {src.GetType().Name}")
        };
    }

    // Collection helpers (use the polymorphic dispatcher)
    public static IEnumerable<DocumentDto> ToDto(this IEnumerable<Document> src)
    {
        return src.Select(ToDto);
    }

    // Derived -> DTO (generated by Mapperly)
    // Map LoadDocument.LoadId -> DocumentDto.LoadId
    [MapProperty(nameof(LoadDocument.LoadId), nameof(DocumentDto.LoadId))]
    private static partial DocumentDto ToLoadDocumentDto(this LoadDocument src);

    // Derived -> DTO (generated by Mapperly)
    // Map EmployeeDocument.EmployeeId -> DocumentDto.EmployeeId
    [MapProperty(nameof(EmployeeDocument.EmployeeId), nameof(DocumentDto.EmployeeId))]
    private static partial DocumentDto ToEmployeeDocumentDto(this EmployeeDocument src);

    private static DateTime Map(DateTimeOffset value)
    {
        return value.UtcDateTime;
    }

    private static DateTime? Map(DateTimeOffset? value)
    {
        return value?.UtcDateTime;
    }
}
