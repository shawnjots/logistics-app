# Azure DevOps Pipeline for Logistics Application
# This pipeline builds and creates artifacts for all components of the logistics app

trigger:
  branches:
    include:
      - release
      - dev
  paths:
    exclude:
      - README.md
      - docs/*
      - '*.md'

pr:
  branches:
    include:
      - release
      - dev

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '9.0.x'
  vmImageName: 'ubuntu-latest'
  PRESENTATION_PROJECTS_DIR: 'src/Presentation'
  CLIENT_PROJECTS_DIR: './src/Client'
  # Set to true to enable MAUI AOT steps in CI
  enableAot: false
  # Set this to true to enable Docker builds
  buildDockerImages: true

stages:
  - stage: 'Build'
    displayName: 'Build Applications'
    jobs:
      
      # Build MAUI Mobile App
      - job: 'BuildMauiApp'
        displayName: 'Build MAUI Mobile App'
        pool:
          vmImage: 'windows-latest'
          
        steps:
          - checkout: self
            fetchDepth: 1
            
          - task: UseDotNet@2
            displayName: 'Setup .NET SDK'
            inputs:
              packageType: 'sdk'
              version: $(dotNetVersion)
              
          - task: PowerShell@2
            displayName: 'Install MAUI Workloads'
            inputs:
              targetType: 'inline'
              script: |
                dotnet workload install android
                dotnet workload install ios  
                dotnet workload install maui
                dotnet workload install maui-tizen
                dotnet workload install wasm-tools
                
          - task: DotNetCoreCLI@2
            displayName: 'Restore Dependencies'
            inputs:
              command: 'restore'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.DriverApp/Logistics.DriverApp.csproj'

          - task: PowerShell@2
            displayName: 'Diagnostic: List resolved NuGet packages for DriverApp'
            inputs:
              targetType: 'inline'
              script: |
                dotnet --info
                dotnet list "$(CLIENT_PROJECTS_DIR)/Logistics.DriverApp/Logistics.DriverApp.csproj" package --include-transitive
                echo 'Searching for Xamarin.AndroidX.SavedState in global packages folder'
                $pkgPath = (dotnet nuget locals global-packages --list) -replace 'global-packages:\s*',''
                if (Test-Path $pkgPath) {
                  Get-ChildItem -Path $pkgPath -Recurse -Filter 'Xamarin.AndroidX.SavedState*' -ErrorAction SilentlyContinue | Select-Object FullName -First 50
                } else {
                  echo "Global packages folder not found: $pkgPath"
                }
              
          - task: DotNetCoreCLI@2
            displayName: 'Build MAUI Driver App (AOT enabled)'
            condition: eq(variables['enableAot'], 'true')
            inputs:
              command: 'build'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.DriverApp/Logistics.DriverApp.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'

          - task: DotNetCoreCLI@2
            displayName: 'Build MAUI Driver App (AOT disabled - CI)'
            condition: ne(variables['enableAot'], 'true')
            inputs:
              command: 'build'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.DriverApp/Logistics.DriverApp.csproj'
              arguments: '--configuration $(buildConfiguration) -p:RunAOTCompilation=false -p:AndroidEnableAot=false -p:AndroidEnableProfiledAot=false --no-restore'
              
          # Publish Android APK
          - task: DotNetCoreCLI@2
            displayName: 'Publish Android APK (AOT enabled)'
            condition: eq(variables['enableAot'], 'true')
            inputs:
              command: 'publish'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.DriverApp/Logistics.DriverApp.csproj'
              arguments: '--configuration $(buildConfiguration) --framework net9.0-android --output $(Build.ArtifactStagingDirectory)/android'
              publishWebProjects: false

          - task: DotNetCoreCLI@2
            displayName: 'Publish Android APK (AOT disabled - CI)'
            condition: ne(variables['enableAot'], 'true')
            inputs:
              command: 'publish'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.DriverApp/Logistics.DriverApp.csproj'
              arguments: '--configuration $(buildConfiguration) --framework net9.0-android -p:RunAOTCompilation=false -p:AndroidEnableAot=false -p:AndroidEnableProfiledAot=false --output $(Build.ArtifactStagingDirectory)/android'
              publishWebProjects: false
              
          - task: PublishBuildArtifacts@1
            displayName: 'Publish MAUI App Artifacts'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'mobile-app'
              
      # Build Docker Images
      

  - stage: 'Test'
    displayName: 'Run Tests'
    dependsOn: 'Build'
    jobs:
      - job: 'RunTests'
        displayName: 'Run Unit Tests'
        pool:
          vmImage: $(vmImageName)
          
        steps:
          - checkout: self
            fetchDepth: 1
            
          - task: UseDotNet@2
            displayName: 'Setup .NET SDK'
            inputs:
              packageType: 'sdk'
              version: $(dotNetVersion)
              
          - task: DotNetCoreCLI@2
            displayName: 'Restore Test Dependencies'
            inputs:
              command: 'restore'
              projects: 'test/**/*.csproj'
              
          - task: DotNetCoreCLI@2
            displayName: 'Run Tests'
            inputs:
              command: 'test'
              projects: 'test/**/*.csproj'
              arguments: '--configuration $(buildConfiguration) --logger trx --collect:"XPlat Code Coverage"'
              publishTestResults: true
              
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

  - stage: 'Package'
    displayName: 'Create Deployment Packages'
    dependsOn: ['Build', 'Test']
    jobs:
      - job: 'CreatePackages'
        displayName: 'Create Deployment Packages'
        pool:
          vmImage: $(vmImageName)
          
        steps:
          - download: current
            artifact: 'backend-services'
            displayName: 'Download Backend Artifacts'
            
          - download: current
            artifact: 'client-apps'
            displayName: 'Download Client App Artifacts'
            
          - download: current
            artifact: 'office-app'
            displayName: 'Download Office App Artifacts'
            condition: succeeded('BuildOfficeApp')
            
          - download: current
            artifact: 'mobile-app'  
            displayName: 'Download Mobile App Artifacts'
            
          - download: current
            artifact: 'docker-images'
            displayName: 'Download Docker Images'
            condition: and(succeeded(), eq(variables['buildDockerImages'], 'true'))
            
          - task: ArchiveFiles@2
            displayName: 'Create Complete Deployment Package'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/logistics-app-complete-$(Build.BuildId).zip'
              
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Complete Package'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'deployment-package'