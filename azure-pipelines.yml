# Azure DevOps Pipeline for Logistics Application
# This pipeline builds and creates artifacts for all components of the logistics app

trigger:
  branches:
    include:
      - release
      - dev
  paths:
    exclude:
      - README.md
      - docs/*
      - '*.md'

pr:
  branches:
    include:
      - release
      - dev

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '9.0.x'
  vmImageName: 'ubuntu-latest'
  PRESENTATION_PROJECTS_DIR: 'src/Presentation'
  CLIENT_PROJECTS_DIR: './src/Client'
  # Set this to true to enable Docker builds
  buildDockerImages: true

stages:
  - stage: 'Build'
    displayName: 'Build Applications'
    jobs:
      
      # Build .NET Backend Services
      - job: 'BuildBackend'
        displayName: 'Build .NET Backend Services'
        pool:
          vmImage: $(vmImageName)
        
        steps:
          - checkout: self
            fetchDepth: 1
            
          - task: UseDotNet@2
            displayName: 'Setup .NET SDK'
            inputs:
              packageType: 'sdk'
              version: $(dotNetVersion)
              
          - task: DotNetCoreCLI@2
            displayName: 'Restore Dependencies (presentation projects only)'
            inputs:
              command: 'restore'
              projects: '$(PRESENTATION_PROJECTS_DIR)/**/*.csproj'
              arguments: '--runtime linux-x64'
              
          - task: DotNetCoreCLI@2
            displayName: 'Build API Project'
            inputs:
              command: 'build'
              projects: '$(PRESENTATION_PROJECTS_DIR)/Logistics.API/Logistics.API.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'
              
          - task: DotNetCoreCLI@2
            displayName: 'Build Identity Server'
            inputs:
              command: 'build'
              projects: '$(PRESENTATION_PROJECTS_DIR)/Logistics.IdentityServer/Logistics.IdentityServer.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'
              
          - task: DotNetCoreCLI@2
            displayName: 'Build DB Migrator'
            inputs:
              command: 'build'
              projects: '$(PRESENTATION_PROJECTS_DIR)/Logistics.DbMigrator/Logistics.DbMigrator.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'
              
          - task: DotNetCoreCLI@2
            displayName: 'Publish API'
            inputs:
              command: 'publish'
              projects: '$(PRESENTATION_PROJECTS_DIR)/Logistics.API/Logistics.API.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/api --no-build'
              publishWebProjects: false
              zipAfterPublish: true
              
          - task: DotNetCoreCLI@2
            displayName: 'Publish Identity Server'
            inputs:
              command: 'publish'
              projects: '$(PRESENTATION_PROJECTS_DIR)/Logistics.IdentityServer/Logistics.IdentityServer.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/identity --no-build'
              publishWebProjects: false
              zipAfterPublish: true
              
          - task: DotNetCoreCLI@2
            displayName: 'Publish DB Migrator'
            inputs:
              command: 'publish'
              projects: '$(PRESENTATION_PROJECTS_DIR)/Logistics.DbMigrator/Logistics.DbMigrator.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/migrator --no-build'
              publishWebProjects: false
              zipAfterPublish: true
              
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Backend Artifacts'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'backend-services'
              
      # Build .NET Client Applications  
      - job: 'BuildDotNetClients'
        displayName: 'Build .NET Client Applications'
        pool:
          vmImage: $(vmImageName)
          
        steps:
          - checkout: self
            fetchDepth: 1
            
          - task: UseDotNet@2
            displayName: 'Setup .NET SDK'
            inputs:
              packageType: 'sdk'
              version: $(dotNetVersion)
              
          - task: DotNetCoreCLI@2
            displayName: 'Restore Admin App Dependencies'
            inputs:
              command: 'restore'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.AdminApp/Logistics.AdminApp.csproj'

          - task: DotNetCoreCLI@2
            displayName: 'Restore HTTP Client Dependencies'
            inputs:
              command: 'restore'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.HttpClient/Logistics.HttpClient.csproj'
              
          - task: DotNetCoreCLI@2
            displayName: 'Build Admin App'
            inputs:
              command: 'build'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.AdminApp/Logistics.AdminApp.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'
              
          - task: DotNetCoreCLI@2
            displayName: 'Build HTTP Client Library'
            inputs:
              command: 'build'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.HttpClient/Logistics.HttpClient.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'
              
          - task: DotNetCoreCLI@2
            displayName: 'Publish Admin App'
            inputs:
              command: 'publish'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.AdminApp/Logistics.AdminApp.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/admin-app --no-build'
              publishWebProjects: false
              zipAfterPublish: true
              
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Client App Artifacts'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'client-apps'
              
      # Build Office App (Bun-based Frontend)
      - job: 'BuildOfficeApp'
        displayName: 'Build Office App (Frontend)'
        pool:
          vmImage: $(vmImageName)
        
        steps:
          - checkout: self
            fetchDepth: 1
            
          # Install Bun using shell script as there's no official Azure task yet
          - task: Bash@3
            displayName: 'Install Bun'
            inputs:
              targetType: 'inline'
              script: |
                curl -fsSL https://bun.sh/install | bash
                echo "##vso[task.prependpath]$HOME/.bun/bin"
                
          - task: Bash@3
            displayName: 'Install Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                cd $(CLIENT_PROJECTS_DIR)/Logistics.OfficeApp
                bun install --force
                
          - task: Bash@3
            displayName: 'Build Office App'
            inputs:
              targetType: 'inline'
              script: |
                cd $(CLIENT_PROJECTS_DIR)/Logistics.OfficeApp
                bun run build
                
          - task: ArchiveFiles@2
            displayName: 'Archive Office App Build'
            inputs:
              rootFolderOrFile: '$(CLIENT_PROJECTS_DIR)/Logistics.OfficeApp/dist'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/office-app.zip'
            condition: succeeded()
              
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Office App Artifacts'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'office-app'

      # Build MAUI Mobile App
      - job: 'BuildMauiApp'
        displayName: 'Build MAUI Mobile App'
        pool:
          vmImage: 'windows-latest'
          
        steps:
          - checkout: self
            fetchDepth: 1
            
          - task: UseDotNet@2
            displayName: 'Setup .NET SDK'
            inputs:
              packageType: 'sdk'
              version: $(dotNetVersion)
              
          - task: PowerShell@2
            displayName: 'Install MAUI Workloads'
            inputs:
              targetType: 'inline'
              script: |
                dotnet workload install android
                dotnet workload install ios  
                dotnet workload install maui
                dotnet workload install maui-tizen
                dotnet workload install wasm-tools
                
          - task: DotNetCoreCLI@2
            displayName: 'Restore Dependencies'
            inputs:
              command: 'restore'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.DriverApp/Logistics.DriverApp.csproj'
              
          - task: DotNetCoreCLI@2
            displayName: 'Build MAUI Driver App'
            inputs:
              command: 'build'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.DriverApp/Logistics.DriverApp.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'
              
          # Publish Android APK
          - task: DotNetCoreCLI@2
            displayName: 'Publish Android APK'
            inputs:
              command: 'publish'
              projects: '$(CLIENT_PROJECTS_DIR)/Logistics.DriverApp/Logistics.DriverApp.csproj'
              arguments: '--configuration $(buildConfiguration) --framework net9.0-android --output $(Build.ArtifactStagingDirectory)/android'
              publishWebProjects: false
              
          - task: PublishBuildArtifacts@1
            displayName: 'Publish MAUI App Artifacts'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'mobile-app'
              
      # Build Docker Images
      - job: 'BuildDockerImages'
        displayName: 'Build Docker Images'
        pool:
          vmImage: $(vmImageName)
        condition: eq(variables['buildDockerImages'], 'true')
          
        steps:
          - checkout: self
            fetchDepth: 1
            
          - task: Docker@2
            displayName: 'Build API Docker Image'
            inputs:
              containerRegistry: # Configure this with your container registry service connection
              repository: 'logistics-api'
              command: 'build'
              Dockerfile: 'src/Presentation/Logistics.API/Dockerfile'
              buildContext: '.'
              tags: |
                $(Build.BuildId)
                latest
                
          - task: Docker@2
            displayName: 'Build Identity Server Docker Image'  
            inputs:
              containerRegistry: # Configure this with your container registry service connection
              repository: 'logistics-identity'
              command: 'build'
              Dockerfile: 'src/Presentation/Logistics.IdentityServer/Dockerfile'
              buildContext: '.'
              tags: |
                $(Build.BuildId)
                latest
                
          - task: Docker@2
            displayName: 'Build Admin App Docker Image'
            inputs:
              containerRegistry: # Configure this with your container registry service connection  
              repository: 'logistics-admin'
              command: 'build'
              Dockerfile: 'src/Client/Logistics.AdminApp/Dockerfile'
              buildContext: '.'
              tags: |
                $(Build.BuildId)
                latest
            condition: exists('src/Client/Logistics.AdminApp/Dockerfile')
            
          # Save Docker images as artifacts
          - task: Docker@2
            displayName: 'Save API Docker Image'
            inputs:
              command: 'save'
              arguments: '-o $(Build.ArtifactStagingDirectory)/logistics-api.tar logistics-api:$(Build.BuildId)'
              
          - task: Docker@2
            displayName: 'Save Identity Docker Image'
            inputs:
              command: 'save'
              arguments: '-o $(Build.ArtifactStagingDirectory)/logistics-identity.tar logistics-identity:$(Build.BuildId)'
              
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Docker Images'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'docker-images'

  - stage: 'Test'
    displayName: 'Run Tests'
    dependsOn: 'Build'
    jobs:
      - job: 'RunTests'
        displayName: 'Run Unit Tests'
        pool:
          vmImage: $(vmImageName)
          
        steps:
          - checkout: self
            fetchDepth: 1
            
          - task: UseDotNet@2
            displayName: 'Setup .NET SDK'
            inputs:
              packageType: 'sdk'
              version: $(dotNetVersion)
              
          - task: DotNetCoreCLI@2
            displayName: 'Restore Test Dependencies'
            inputs:
              command: 'restore'
              projects: 'test/**/*.csproj'
              
          - task: DotNetCoreCLI@2
            displayName: 'Run Tests'
            inputs:
              command: 'test'
              projects: 'test/**/*.csproj'
              arguments: '--configuration $(buildConfiguration) --logger trx --collect:"XPlat Code Coverage"'
              publishTestResults: true
              
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

  - stage: 'Package'
    displayName: 'Create Deployment Packages'
    dependsOn: ['Build', 'Test']
    jobs:
      - job: 'CreatePackages'
        displayName: 'Create Deployment Packages'
        pool:
          vmImage: $(vmImageName)
          
        steps:
          - download: current
            artifact: 'backend-services'
            displayName: 'Download Backend Artifacts'
            
          - download: current
            artifact: 'client-apps'
            displayName: 'Download Client App Artifacts'
            
          - download: current
            artifact: 'office-app'
            displayName: 'Download Office App Artifacts'
            condition: succeeded('BuildOfficeApp')
            
          - download: current
            artifact: 'mobile-app'  
            displayName: 'Download Mobile App Artifacts'
            
          - download: current
            artifact: 'docker-images'
            displayName: 'Download Docker Images'
            condition: and(succeeded(), eq(variables['buildDockerImages'], 'true'))
            
          - task: ArchiveFiles@2
            displayName: 'Create Complete Deployment Package'
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)'
              includeRootFolder: true
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/logistics-app-complete-$(Build.BuildId).zip'
              
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Complete Package'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'deployment-package'